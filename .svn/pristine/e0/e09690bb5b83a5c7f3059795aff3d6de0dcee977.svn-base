//
//  Utility.m
//  WebViewDemo
//
//  Created by Nathan.Li on 3/10/15.
//  Copyright (c) 2015 Movit. All rights reserved.
//

#import "Utility.h"
#import <objc/runtime.h>
#import <ifaddrs.h>
#import <arpa/inet.h>
#include <sys/sysctl.h>
#import "MBProgressHUD.h"
#import <CommonCrypto/CommonDigest.h>
#import <UIImage+GIF.h>

@implementation Utility

NSString* encodeToPercentEscapeString(NSString *string) {
    if (string.length) {
        return (NSString *)CFBridgingRelease
        (CFURLCreateStringByAddingPercentEscapes(NULL,
                                                 (CFStringRef) string,
                                                 NULL,
                                                 (CFStringRef) @"!*'();:@&=+$,/?%#[]",
                                                 kCFStringEncodingUTF8));
    } else {
        return string;
    }
}

NSString* decodeFromPercentEscapeString(NSString *string) {
    if (string.length) {
        string = [string stringByReplacingOccurrencesOfString:@"+" withString:@"%20"];
        return (NSString *)CFBridgingRelease
        (CFURLCreateStringByReplacingPercentEscapesUsingEncoding(NULL,
                                                                 (CFStringRef) string,
                                                                 CFSTR(""),
                                                                 kCFStringEncodingUTF8));
    } else {
        return string;
    }
}

+ (void)showNetworkActivityIndicator {
    [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
}

+ (void)hideNetworkActivityIndicator {
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
}

+ (void)showAlertView:(NSString*)title message:(NSString*)msg{
    if (title == nil) {
        title = @""; // for ios8 style fix
    }
    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:title  message:msg delegate:nil cancelButtonTitle:I18NString(@"确定", @"alert") otherButtonTitles:nil];
    [alert show];
}

+ (void)showAlertView:(NSString *)title message:(NSString *)msg buttonClickedBlock:(clickedButtonBlock)cbb {
    if (title == nil) {
        title = @""; // for ios8 style fix
    }
    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:title  message:msg delegate:nil cancelButtonTitle:I18NString(@"确定", @"alert") otherButtonTitles:nil];
    [alert setButtonClickedBlock:cbb];
    [alert show];
}

+ (CGRect)screenBoundsFixedToPortraitOrientation {
    UIScreen *screen = [UIScreen mainScreen];
#ifdef __IPHONE_8_0
    if ([screen respondsToSelector:@selector(fixedCoordinateSpace)]) {
        return [screen.coordinateSpace convertRect:screen.bounds toCoordinateSpace:screen.fixedCoordinateSpace];
    }
#endif
    return screen.bounds;
}

+ (NSString *)appVersion {
    static NSString* version;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];
        version = [infoDictionary objectForKey:@"CFBundleShortVersionString"];
    });
    return version;
}

+ (NSUInteger)deviceSystemMajorVersion {
    static NSUInteger _deviceSystemMajorVersion = -1;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _deviceSystemMajorVersion = [[[[[UIDevice currentDevice] systemVersion] componentsSeparatedByString:@"."] objectAtIndex:0] intValue];
    });
    return _deviceSystemMajorVersion;
}
+ (NSString *)platform {
    static NSString* platform;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        size_t size;
        sysctlbyname("hw.machine", NULL, &size, NULL, 0);
        char *machine = malloc(size);
        sysctlbyname("hw.machine", machine, &size, NULL, 0);
        platform = [NSString stringWithCString:machine encoding:NSUTF8StringEncoding];
        free(machine);
    });
    return platform;
}
+ (NSString *)wifiIPAddress {
    NSString *address = @"error";
    struct ifaddrs *interfaces = NULL;
    struct ifaddrs *temp_addr = NULL;
    int success = 0;
    // retrieve the current interfaces - returns 0 on success
    success = getifaddrs(&interfaces);
    if (success == 0) {
        // Loop through linked list of interfaces
        temp_addr = interfaces;
        while (temp_addr != NULL) {
            if( temp_addr->ifa_addr->sa_family == AF_INET) {
                // Check if interface is en0 which is the wifi connection on the iPhone
                if ([[NSString stringWithUTF8String:temp_addr->ifa_name] isEqualToString:@"en0"]) {
                    // Get NSString from C String
                    address = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_addr)->sin_addr)];
                }
            }
            temp_addr = temp_addr->ifa_next;
        }
    }    // Free memory
    freeifaddrs(interfaces);
    return address;
}

+ (NSString *)createUUID
{
    // Create universally unique identifier (object)
    CFUUIDRef uuidObject = CFUUIDCreate(kCFAllocatorDefault);
    
    // Get the string representation of CFUUID object.
    NSString *uuidStr = (NSString *)CFBridgingRelease(CFUUIDCreateString(kCFAllocatorDefault, uuidObject));
    
    // If needed, here is how to get a representation in bytes, returned as a structure
    // typedef struct {
    //   UInt8 byte0;
    //   UInt8 byte1;
    //   ...
    //   UInt8 byte15;
    // } CFUUIDBytes;
    
    CFRelease(uuidObject);
    
    return uuidStr;
}

static MBProgressHUD *hud;
+ (void)showHUD {
    [Utility showHUDWithText:nil];
}
+ (void)showHUDWithText:(NSString *)text {
    if (hud == nil) {
        id<UIApplicationDelegate> de = [UIApplication sharedApplication].delegate;
        hud = [[MBProgressHUD alloc] initWithWindow:de.window];
        [de.window addSubview:hud];
//        hud.dimBackground = YES;
        hud.mode = MBProgressHUDModeCustomView;
        
        float w = 150.0;
        float h = 150.0;
        
        UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, w, h)];
        
        
        UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0.0, 0.0, w, h)];
//        imageView.layer.cornerRadius = 5;
//        imageView.clipsToBounds = YES;
//        imageView.animationImages = @[[UIImage imageNamed:@"1"],
//                                    [UIImage imageNamed:@"2"],
//                                    [UIImage imageNamed:@"3"],
//                                    [UIImage imageNamed:@"4"],
//                                    [UIImage imageNamed:@"5"],
//                                    [UIImage imageNamed:@"6"],
//                                    [UIImage imageNamed:@"7"],
//                                    [UIImage imageNamed:@"8"],
//                                    [UIImage imageNamed:@"9"],
//                                    [UIImage imageNamed:@"10"],
//                                    [UIImage imageNamed:@"11"],
//                                    [UIImage imageNamed:@"12"],
//                                    ];
//        imageView.animationDuration = .7;
//        imageView.animationRepeatCount = 0;
//        [imageView startAnimating];
        imageView.contentMode = UIViewContentModeCenter;
        imageView.image = [UIImage imageNamed:@"风车_Body"];
        
        
        UIImageView *imageView2 = [[UIImageView alloc] initWithFrame:CGRectMake(0.0, 0.0, w, h)];
        imageView2.contentMode = UIViewContentModeCenter;
        imageView2.image = [UIImage imageNamed:@"风车_Wing"];
        imageView2.center = CGPointMake(74, 54);
        imageView2.tag = 909;
        
        
        [view addSubview:imageView2];
        [view addSubview:imageView];
        hud.color = [UIColor clearColor];
        hud.customView = view;
        hud.backgroundColor = RGBA(0, 0, 0, 0.6);
        
    }
    
//    hud.labelText = text;
//    [(UIImageView *)hud.customView startAnimating];
    
    CABasicAnimation* rotationAnimation;
    rotationAnimation = [CABasicAnimation animationWithKeyPath:@"transform.rotation.z"];
    rotationAnimation.toValue = [NSNumber numberWithFloat: M_PI * 2.0];
    rotationAnimation.duration = 1.5;
    rotationAnimation.cumulative = YES;
    rotationAnimation.repeatCount = CGFLOAT_MAX;
//    rotationAnimation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
    [[hud.customView viewWithTag:909].layer addAnimation:rotationAnimation forKey:@"rotationAnimation"];
    
    [hud show:YES];
}
+ (void)hideHUD {
//    [(UIImageView *)hud.customView stopAnimating];
    [[hud.customView viewWithTag:909].layer removeAnimationForKey:@"rotationAnimation"];
    [hud hide:YES];
}

+ (long long)folderSizeAtPath:(NSString*)folderPath{
    NSFileManager* manager = [NSFileManager defaultManager];
    if (![manager fileExistsAtPath:folderPath]) return 0;
    NSEnumerator *childFilesEnumerator = [[manager subpathsAtPath:folderPath] objectEnumerator];
    NSString* fileName;
    long long folderSize = 0;
    while ((fileName = [childFilesEnumerator nextObject]) != nil){
        NSString* fileAbsolutePath = [folderPath stringByAppendingPathComponent:fileName];
        folderSize += [self fileSizeAtPath:fileAbsolutePath];
    }
    return folderSize;
}
+ (long long)fileSizeAtPath:(NSString*)filePath{
    NSFileManager* manager = [NSFileManager defaultManager];
    if ([manager fileExistsAtPath:filePath]){
        return [[manager attributesOfItemAtPath:filePath error:nil] fileSize];
    }
    return 0;
}
@end

@implementation UITabBar(CustomBadge)
- (void)setupBadge {
    float itemWidth = SCREEN_WIDTH / self.items.count;
    for (int i = 0; i < self.items.count; i++) {
        UIView *badgeView = [[UIView alloc] initWithFrame:CGRectMake(itemWidth/2+10 + itemWidth * i, 5, 8, 8)];
        badgeView.backgroundColor = [UIColor redColor];
        badgeView.layer.cornerRadius = 4;
        badgeView.tag = 1000+i;
        badgeView.hidden = YES;
        [self addSubview:badgeView];
    }
}
- (void)showBadgeAtItemIndex:(NSInteger)index {
    UIView *badgeView = [self viewWithTag:1000+index];
    badgeView.hidden = NO;
}
- (void)hideBadgeAtItemIndex:(NSInteger)index {
    UIView *badgeView = [self viewWithTag:1000+index];
    badgeView.hidden = YES;
}
- (void)hideAllBadge {
    for (int i = 0; i < self.items.count; i++) {
        UIView *badgeView = [self viewWithTag:1000+i];
        badgeView.hidden = YES;
    }
}
@end

@implementation NSNull (KeyValue)
- (id)objectForKeyedSubscript:(id)key {
    return nil;
}
- (id)valueForKey:(NSString *)key {
    return nil;
}
-(id)valueForKeyPath:(NSString *)keyPath {
    return nil;
}
- (id)objectForKey:(id)key {
    return nil;
}
@end

@implementation NSObject (Association)

static char associatedObjectsKey;

- (id)associatedObjectForKey:(NSString*)key {
    NSMutableDictionary *dict = objc_getAssociatedObject(self, &associatedObjectsKey);
    return [dict objectForKey:key];
}

- (void)setAssociatedObject:(id)object forKey:(NSString*)key {
    NSMutableDictionary *dict = objc_getAssociatedObject(self, &associatedObjectsKey);
    if (!dict) {
        dict = [[NSMutableDictionary alloc] init];
        objc_setAssociatedObject(self, &associatedObjectsKey, dict, OBJC_ASSOCIATION_RETAIN);
    } [dict setObject:object forKey:key];
}
- (void)removeAssociatedObjectForKey:(NSString *)key {
    objc_setAssociatedObject(self, &associatedObjectsKey, nil, OBJC_ASSOCIATION_RETAIN);
}
@end

@implementation UIAlertView (Block)

- (void)setButtonClickedBlock:(clickedButtonBlock)cbb {
    self.delegate = self;
    [self setAssociatedObject:cbb forKey:@"clickedButtonBlockKey"];
}

- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex {
    clickedButtonBlock ccb = [self associatedObjectForKey:@"clickedButtonBlockKey"];
    ccb(buttonIndex);
}
@end

@implementation UIActionSheet (Block)
- (void)setButtonClickedBlock:(clickedButtonBlock)cbb {
    self.delegate = self;
    [self setAssociatedObject:cbb forKey:@"clickedButtonBlockKey"];
}
- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex {
    clickedButtonBlock ccb = [self associatedObjectForKey:@"clickedButtonBlockKey"];
    ccb(buttonIndex);
}
@end

@implementation UIWebView(DataDetectorTypeNone)
- (void)awakeFromNib {
    [super awakeFromNib];
    self.dataDetectorTypes = UIDataDetectorTypeNone;
}
@end

@implementation NSData(Save)
-(BOOL)saveToPath:(NSString *)path {
    BOOL result = NO;
    NSFileManager *fileManager = [NSFileManager defaultManager];
    BOOL isDir;
    
    //FOLDER exist
    if ([fileManager fileExistsAtPath:[path stringByDeletingLastPathComponent] isDirectory:&isDir] && isDir) {
        //FILE exist
        //       if ([fileManager fileExistsAtPath:filePath isDirectory:&isDir] && !isDir) {
        
        //      } else {
        result = [self writeToFile:path atomically:YES];
        //      }
    } else {
        //create FOLDER
        NSError *error;
        if ([fileManager createDirectoryAtPath:path withIntermediateDirectories:NO attributes:nil error:&error]){
            result = [self writeToFile:path atomically:YES];
        } else if(error){
            NSLog(@"%@",[error description]);
        }
    }
    return result;
}
@end

@implementation UIImage (LCHEXT)
+ (UIImage *)imageWithColor:(UIColor *)color size:(CGSize)size cornerRadius:(CGFloat)cornerRadius {
    CGRect rect = CGRectMake(0, 0, size.width, size.height);
    UIBezierPath *roundedRect = [UIBezierPath bezierPathWithRoundedRect:rect cornerRadius:cornerRadius];
    roundedRect.lineWidth = 0;
    UIGraphicsBeginImageContextWithOptions(rect.size, NO, 0.0f);
    [color setFill];
    [roundedRect fill];
    [roundedRect stroke];
    [roundedRect addClip];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return [image resizableImageWithCapInsets:UIEdgeInsetsMake(cornerRadius, cornerRadius, cornerRadius, cornerRadius)];
}
+ (UIImage *)imageWithScreenshotForView:(UIView *)view {
    UIGraphicsBeginImageContext(view.bounds.size);
    [view.layer renderInContext:UIGraphicsGetCurrentContext()];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    NSData *imageData = UIImageJPEGRepresentation(image, 1);
    image = [UIImage imageWithData:imageData];
    return image;
}
+ (UIImage *)gradientColorImageFromColors:(NSArray*)colors gradientType:(GradientType)gradientType imgSize:(CGSize)imgSize {
    NSMutableArray *ar = [NSMutableArray array];
    for(UIColor *c in colors) {
        [ar addObject:(id)c.CGColor];
    }
    UIGraphicsBeginImageContextWithOptions(imgSize, YES, 1);
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSaveGState(context);
    CGColorSpaceRef colorSpace = CGColorGetColorSpace([[colors lastObject] CGColor]);
    CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (CFArrayRef)ar, NULL);
    CGPoint start;
    CGPoint end;
    switch (gradientType) {
        case GradientTypeTopToBottom:
            start = CGPointMake(0.0, 0.0);
            end = CGPointMake(0.0, imgSize.height);
            break;
        case GradientTypeLeftToRight:
            start = CGPointMake(0.0, 0.0);
            end = CGPointMake(imgSize.width, 0.0);
            break;
        case GradientTypeUpleftToLowright:
            start = CGPointMake(0.0, 0.0);
            end = CGPointMake(imgSize.width, imgSize.height);
            break;
        case GradientTypeUprightToLowleft:
            start = CGPointMake(imgSize.width, 0.0);
            end = CGPointMake(0.0, imgSize.height);
            break;
        default:
            break;
    }
    CGContextDrawLinearGradient(context, gradient, start, end, kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    CGGradientRelease(gradient);
    CGContextRestoreGState(context);
    CGColorSpaceRelease(colorSpace);
    UIGraphicsEndImageContext();
    return image;
}
@end


@implementation NSString (SimpleAttributed)
- (NSMutableAttributedString *)attrStringWithAttributes:(NSDictionary*)attrs range:(NSRange)range {
    NSMutableAttributedString *attrStr = [[NSMutableAttributedString alloc] initWithString:self];
    [attrStr setAttributes:attrs range:range];
    return attrStr;
}
- (NSMutableAttributedString *)attrStringWithColor:(UIColor*)color font:(UIFont*)font range:(NSRange)range {
    NSMutableDictionary *attrs = [[NSMutableDictionary alloc] init];
    if (font) {
        attrs[NSFontAttributeName] = font;
    }
    if (color) {
        attrs[NSForegroundColorAttributeName] = color;
    }
    return [self attrStringWithAttributes:attrs range:range];
}
@end
@implementation NSString (MD5)
- (NSString *)md5HexDigest {
    const char* str = [self UTF8String];
    unsigned char result[CC_MD5_DIGEST_LENGTH];
    CC_MD5(str, (CC_LONG)strlen(str), result);
    NSMutableString *ret = [NSMutableString stringWithCapacity:CC_MD5_DIGEST_LENGTH*2];
    
    for(int i = 0; i<CC_MD5_DIGEST_LENGTH; i++) {
        [ret appendFormat:@"%02x",result[i]];
    }
    return ret;
}
- (NSString *)trimmed {
    return [self stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
}
@end

@implementation NSDate (Format)
- (NSString *)stringWithFormat:(NSString *)format {
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    if (format.length) {
        formatter.dateFormat = format;
    } else {
        formatter.dateStyle = NSDateFormatterMediumStyle;
        formatter.timeStyle = NSDateFormatterMediumStyle;
    }
    return [formatter stringFromDate:self];
}
+ (NSDate *)dateFromString:(NSString *)string format:(NSString *)format {
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    formatter.dateFormat = format;
    return [formatter dateFromString:string];
}
+ (NSDate *)dateFrom:(NSDate *)date year:(NSInteger)year month:(NSInteger)month day:(NSInteger)day {
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSDateComponents *adcomps = [[NSDateComponents alloc] init];
    [adcomps setYear:year];
    [adcomps setMonth:month];
    [adcomps setDay:day];
    return [calendar dateByAddingComponents:adcomps toDate:date options:0];
}
+ (NSDate *)currentMonth {
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSDateComponents *comps = [calendar components:NSCalendarUnitYear|NSCalendarUnitMonth fromDate:[NSDate date]];
    return [calendar dateFromComponents:comps];
}
@end

@implementation NSNumber (Format)
- (NSString *) stringWithFormat:(NSString *)format {
    NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
    [numberFormatter setPositiveFormat:format];
    return [numberFormatter stringFromNumber:self];
}
- (NSString *) formatedStringValue {
    return [self stringWithFormat:@"########0.#"];
}
@end